{"version":3,"sources":["../../src/controller/job.js"],"names":["config","db","api","post","req","res","newJob","job","body","company","image","salary","location","coordinates","lat","long","save","err","send","json","message","get","find","jobs","findById","params","id","put","delete","status","nul","remove","_id","Review","review","newReview","title","text","reviews","push","foodtype"],"mappings":"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","file":"job.js","sourcesContent":["import mongoose from 'mongoose';\nimport {Router} from 'express';\nimport Job from '../model/job';\n\nimport  { authenticate } from '../middleware/authMiddleware';\n\nexport default({config, db}) => {\n  let api = Router();\n\n  // CRUD: Create, Read, Update, Delete\n\n  // '/v1/job/add' - Create\n\n  // '/v1/job/add' - POST - add a food truck\n    api.post('/add', (req, res) => {\n      let newJob = new Job();\n      newJob.job = req.body.job;\n      newJob.company = req.body.company;\n      newJob.image = req.body.image;\n      newJob.salary = req.body.salary;\n      newJob.location.coordinates.lat = req.body.location.coordinates.lat;\n      newJob.location.coordinates.long = req.body.location.coordinates.long;\n\n\n      newJob.save(function(err) {\n        if (err) {\n          return res.send(err);\n        }\n        res.json({ message: 'Job saved successfully' });\n      });\n    });\n\n\n\n  // '/v1/job' - Read\n  api.get('/', (req, res) => {\n    Job.find({}, (err, jobs) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(jobs);\n    });\n  });\n\n  // '/v1/job/:id' - Read by id\n  api.get('/:id', (req, res) => {\n    Job.findById(req.params.id, (err, job) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(job);\n    });\n  });\n\n  // '/v1/job/:id' - Updated PUT\n  api.put('/:id', (req, res) => {\n    newJob.findById(req.params.id, (err, job) => {\n      if (err) {\n        res.send(err);\n      }\n      newJob.job = req.body.job;\n      newJob.company = req.body.company;\n      newJob.image = req.body.image;\n      newJob.salary = req.body.salary;\n      newJob.location.coordinates.lat = req.body.location.coordinates.lat;\n      newJob.location.coordinates.long = req.body.location.coordinates.long;\n      newJob.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({message: \"Job info Updated\"});\n      });\n    });\n  });\n\n  // '/v1/job/:id' - Delete\napi.delete('/:id', (req, res) => {\n  Job.findById(req.params.id, (err, job) => {\n    if(err){\n      res.status(500).send(err);\n      return;\n    }\n    if(job == nul){\n      res.status(404).send(\"Job not found\");\n      return;\n    }\n    Job.remove({\n      _id: req.params.id\n    }, (err, job) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      Review.remove({\n        _id: req.params.id\n      }, (err, review) => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({message: \"Foodtruck and Reviews succesfully removed\"});\n      });\n    });\n  });\n});\n\n\n  //add review for specific job id\n  // '/v1/job/reviews/add/:id'\n\n  api.post('/reviews/add/:id', (req, res) => {\n    Job.findById(req.params.id, (err, job) => {\n      if (err) {\n        res.send(err);\n      }\n      let newReview = new Review();\n\n      newReview.title = req.body.title;\n      newReview.text = req.body.text;\n      newReview.job = job._id;\n      newReview.save((err, review) => {\n        if (err) {\n          res.send(err);\n        }\n        job.reviews.push(newReview);\n        job.save(err => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({message: 'Foodtruck review saved'});\n        });\n      });\n    });\n  });\n\n  //get reviews for specific job id\n  // '/v1/job/reviews/:id'\n  api.get('/reviews/:id', (req, res) => {\n    Review.find({\n      job: req.params.id\n    }, (err, reviews) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(reviews);\n    });\n  });\n\n  // get job by foodtype\n  // â€˜/v1/job/foodtype/:foodtypeâ€™\n\n  api.get('/foodtype/:foodtype', (req, res) => {\n    Job.find({\n      foodtype: req.params.foodtype\n    }, (err, jobs) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(jobs);\n    });\n  });\n\n\n\n  return api;\n\n}\n"]}